"Git Bash"

COPIA E COLA
SHIFT + INSERT

cd C:/T-Systems/Cursos/Alura/Git\ e\ Github

// Execute o comando git init para inicializar um repositório Git;
    git init 
    git init --bare (só contem as alterações / nao entrar aqui p/ editrar /não contem copias fisica /PURO)

// Lista repo locais que conhece
    git remote  
    //"Nome do Servidor" e "URL / CAMINHO / endereço na REDE"
    git remote add local C:/Users/ALURA/Documents/git-e-github/servido 

    // Exibir o nome e o local
    git remote -v (fetch e push - onde busco e mando)

    //depois alterar o nome padroa de origem
    git remote rename "nomeDe" "NomePara"
    git remote rename origin local

    // CLONAR PARA OUTRA MAQUINA ou pessoa
    // dentro da pasta que vai receber a clonagem (onde as copias vão ser enviadas)
    git clone "URL" "Nome opcional"

    //PUSH - como enviar push nome do servidor e o branch (master)
    git push "NOMESEMASPAS" master

    //PULL - como buscar pull nome do servidor e o branch (master no caso)
    git push "NOMESEMASPAS" master


// Execute o comando git status para garantir que você está em um repositório Git
// E que o arquivo index.html é reconhecido. Leia com calma a saída deste comando
    git status

    // HEAD: Estado atual do nosso código, ou seja, onde o Git nos colocou
    // Working tree: Local onde os arquivos realmente estão sendo armazenados e editados
    // Index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.

// Adicionando pend
// Com isso, se rodarmos git status, desta vez teremos um retorno diferente, incluindo Changes to committed
    git add index.html

// Para que todos os arquivos da pasta atual sejam monitorados.
    git add . 

// Comitar    
    git commit -m "Criando arquivo index.html com lista de cursos"

// Usaremos clear para limparmos a tela
    clear

// Historico que nos mostrará diversas informações,
// https://devhints.io/git-log
    git log 
    git log -- oneline
    git log -p


// Alterando configurações
// Para cada projeto, ou, para a máquina toda, utilizando o git 
    git config --local

    git config --global

    git config --local user.name "Nomezão "
    git config --local user.email "E-mailZão"

// Criar pasta
    mkdir NOMEPASTA

// Verificcar branch
    git branch
    git branch NOMEDONOVOBRNACH //cria branch
    git checkout NOMEDOBRNACH   //MUDA para outro branch

    OU

    git checkout -b NOMEDONOVOBRNACH //cria e muda prar novo branch

====================================================
                MERGE DE BRANCH
====================================================
// JUNÇÂO DE branch MERGE
    //atual exemplo master
    commit merge NOMEDAOUTRA
    // dois pontos / X / ENTER

====================================================

====================================================
                REBASE DE BRANCH
====================================================
// Tranferencia DE branch por commits
    //rebaseia o que foi feit o tranferindo os commits de / para 
    git rebase NOMEDAOUTRA
    // dois pontos / X / ENTER

====================================================

    // Desfazer a linha

    git checkout -- <file>

    //Desfazer marcação de commit

    git reset HEAD <file>

    //alteração e commit / Hast do commit
    git revert <hash>

====================================================

    // Salva em um lugar temporareo

    git stash
    git stash list
    git stash apply <numero> //aplicar
    git stash drop //remover da stash
    git stash pop //aplica a ultima stash e remove ela da lista de stash


    // Retornar / navegar em commits

    git checkout <COMIT Hast>
    //des-anexado está em um commit, nao mais em uma linha 
    // se quiser commitar a partir de alguma alteração feita aqui tem de ccriar um novo branch
    // antes de ficar desanexado solto 

====================================================
    // Diferença seja ela do atual(o que foi modificado)    
    git diff
    git diff <hash 1>..<hash 2>

====================================================
criando marcos na aplicação como versoes
pelo uso de tags
    // -a Adicionando
    git tag -a <v0.1.0> escrver texto 
    -m <mensagem lançado versao beta exemplo>

    // listar tag atuais utilizando que foram usadas
    git tag


    // consigo mandar as tag pelos comandos abaxio como no github
    git push local master
    git push local v0.1.0

    VISUALIZAR NO GIT HUB




