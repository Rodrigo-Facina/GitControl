"Git Bash"

COPIA E COLA
SHIFT + INSERT

// Execute o comando git init para inicializar um repositório Git;
    git init 
    git init --bare (só contem as alterações / nao entrar aqui p/ editrar /não contem copias fisica /PURO)

// Lista repo locais que conhece
    git remote  
    //"Nome do Servidor" e "URL / CAMINHO / endereço na REDE"
    git remote add local C:/Users/ALURA/Documents/git-e-github/servido 

    // Exibir o nome e o local
    git remote -v (fetch e push - onde busco e mando)

    // CLONAR PARA OUTRA MAQUINA ou pessoa
    // dentro da pasta que vai receber a clonagem (onde as copias vão ser enviadas)
    git clone "URL" "Nome opcional"

    //PUSH - como enviar push nome do servidor e o branch (master)
    git push "NOMESEMASPAS" master

    


// Execute o comando git status para garantir que você está em um repositório Git
// E que o arquivo index.html é reconhecido. Leia com calma a saída deste comando
    git status

    // HEAD: Estado atual do nosso código, ou seja, onde o Git nos colocou
    // Working tree: Local onde os arquivos realmente estão sendo armazenados e editados
    // Index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.

// Adicionando pend
// Com isso, se rodarmos git status, desta vez teremos um retorno diferente, incluindo Changes to committed
    git add index.html

// Para que todos os arquivos da pasta atual sejam monitorados.
    git add . 

// Comitar    
    git commit -m "Criando arquivo index.html com lista de cursos"

// Usaremos clear para limparmos a tela
    clear

// Historico que nos mostrará diversas informações,
// https://devhints.io/git-log
    git log 
    git log -- oneline
    git log -p


// Alterando configurações
// Para cada projeto, ou, para a máquina toda, utilizando o git 
    git config --local

    git config --global

    git config --local user.name "Nomezão "
    git config --local user.email "E-mailZão"

// Criar pasta
    mkdir NOMEPASTA



